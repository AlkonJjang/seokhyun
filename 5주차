1654 랜선 자르기

입력
첫째 줄에는 이미 가지고 있는 랜선의 개수 K, 그리고 필요한 랜선의 개수 N이 입력된다. 
K는 1이상 10,000이하의 정수이고, N은 1이상 1,000,000이하의 정수이다. 그리고 항상 K ≦ N 이다. 
그 후 K줄에 걸쳐 이미 가지고 있는 각 랜선의 길이가 센티미터 단위의 정수로 입력된다. 랜선의 길이는 231-1보다 작거나 같은 자연수이다.

출력
첫째 줄에 N개를 만들 수 있는 랜선의 최대 길이를 센티미터 단위의 정수로 출력한다.

예제
입력            출력
4 11            200
802
743
457
539

#include <iostream>
#include <algorithm>
#include <stdio.h>

using namespace std;

int binsearch(int arr[], int size, int left, int right, int n) {
	long long start = left;
	long long end = right;
    int r = 0;
	while (start <= end) {
		long long mid = (start + end) / 2;   // mid로 각 랜선을 
		int sum = 0;                         // 잘랐을 때 
		for (int t = 0; t < size; t++) {     // 만들어지는 랜선의
			sum += arr[t] / mid;               // 개수 구하기
		}
		if (sum >= n) {                      // 같은 개수가 나오는 길이가 여러 가지가 있을 수 있으므로 최대 길이가 나올 때까지 계속 탐색
            start = mid + 1;
            r = mid;
		}
		else {
			end = mid - 1;
		}
	}
    return r;
}

int main() {
	int k;
	int arr[10000];
	int n;
	int max = -1;
	scanf("%d %d", &k, &n);
	for (int i = 0; i < k; i++) {
		scanf("%d", &arr[i]);
		if (arr[i] > max) {
			max = arr[i];
		}
	}
	printf("%d", binsearch(arr, k, 1, max, n));
	
}


1637 날카로운 눈


입력
첫째 줄에 입력의 개수 N이 주어진다. N은 1이상 20,000이하인 수이다. 그 다음 줄부터 N줄에 걸쳐 세 개의 정수 A, C, B가 주어지는데, 
이것은 A, A+B, A+2B, ..., A+kB (단, A+kB ≦ C) 의 정수들이 정수더미 안에 있다는 것을 나타낸다. A, B, C는 1보다 크거나 같고 2,147,483,647보다 
작거나 같은 정수이다. 정수더미는 N개의 입력이 나타내는 정수들을 모두 포함한다.

출력
첫째 줄에 정수 두 개를 출력하는데, 첫 번째는 홀수개 존재하는 정수를 출력하고, 두 번째는 그 정수가 몇 개 들어있는지 출력한다. 
만약 홀수개 존재하는 정수가 없다면 NOTHING을 출력한다.

예제
입력         출력
4            4 3
1 10 1
4 4 1
1 5 1
6 10 1

#include <iostream>
#include <vector>
using namespace std;

const long long X = 2147483647;
vector<long long> a, b, c;
int n;

long long search(long long mid) {
    long long ans = 0;
    for (int i = 0; i < n; i++) {
        if (mid >= a[i]) {
            ans += (min(mid, b[i]) - a[i]) / c[i] + 1;  // A+kB ≦ C 공식을 역으로 계산해서 개수를 찾음
        }
    }
    return ans;
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    long long left = 0, right = X + 1, count = -1;
    cin >> n;
    a.resize(n);
    b.resize(n);
    c.resize(n);

    for (int i = 0; i < n; i++) {
        cin >> a[i] >> b[i] >> c[i];
    }

    while (left <= right) {
        long long mid = left + (right - left) / 2;
        if (search(mid) % 2) {                    // 개수의 합이 짝수인 위치까지 이진 색탐색
            right = mid - 1;
            count = mid;
        }
        else {
            left = mid + 1;
        }
    }

    if (count == -1) {
        cout << "NOTHING";
    }
    else {
        cout << count << " " << search(count) - search(count - 1);  // 홀수개가 있는 수까지의 누적합 - 그 전까지의 누적합  = 홀수개의 개수
    }

    return 0;
}


예제
입력         출력
4            4 3
1 10 1
4 4 1
1 5 1
6 10 1


 1   2   3   4   5   6   7   8   9   10
             4
 1   2   3   4   5
                     6   7   8   9   10
-------------------------------------------------------                     
 2   2   2   3   2   2   2   2   2   2      개수
 
 2   4   6   9   11  13  15  17  19  21     개수들의 합




































